pg_county_crime_old <-  pg_county_crime_old %>%
rename(crime_type = clearance_code_inc_type)
pg_county_crime_new <- pg_county_crime_new %>%
rename(crime_type = clearance_code_inc_type)
pg_county_crime_old %>%
distinct(crime_type)
pg_county_crime_new %>%
distinct(crime_type)
pg_county_crime_old <- pg_county_crime_old %>%
filter(year >= 2019)
#pg county_crime_new from July 5 - Oct. 10
#binding
total_pg_county_data <- bind_rows(pg_county_crime_old, pg_county_crime_new )
pg_stolen_auto <- total_pg_county_data %>%
filter(crime_type == "AUTO, STOLEN" | crime_type == "AUTO, STOLEN & RECOVERED" )
# yearly data
pg_yearly_data <- pg_stolen_auto %>%
group_by(year) %>%
summarize(count = n()) %>%
mutate(perc = (count / sum(count)) * 100)
ggplot() +
geom_bar(
data=pg_yearly_data,
aes(x=year, weight=`count`))+
labs(title = "Car thefts in PG county",
caption =  "Source: PG Open Data | Graph by Dylan Manfre")
# What I did here first was make individual month totals by year. I thought there was a condenced way to do this so I used Chat GPT to write this look to iterate over each year from 2017 to 2023.
# My next attempt was at making a loop before Derek suggested making a month/year column
pg_month_total <- pg_stolen_auto %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month, label = TRUE)) %>%
arrange(desc(count))
pg_stolen_recovered_only <- total_pg_county_data %>%
filter(crime_type == "AUTO, STOLEN & RECOVERED")
#What percentage were stolen
pg_perc_stolen <- pg_stolen_auto %>%
group_by(year, crime_type) %>%
summarize(count = n()) %>%
#mutate(perc = (count / sum(count)) * 100) %>%
pivot_wider(names_from = year, values_from = count)
pg_stolen_recovered_years <- pg_stolen_recovered_only %>%
group_by(year) %>%
summarize(count = n())
# cleaning
moco_data <- moco_data %>%
clean_names() %>%
separate(start_date_time, c('start_date', 'start_time'), sep=' ', extra='merge') %>%
mutate(start_date = as.Date(start_date, format = "%m/%d/%Y"),
year = year(start_date),
month = month(start_date)) %>%
filter(year >= 2019) %>%
filter(crime_name2 == "Motor Vehicle Theft") %>%
rename(crime_name = crime_name2)
moco_data %>%
group_by(city) %>%
summarize(count = n())
moco_data <- moco_data %>%
mutate(city = case_when(
city == "SILVE SPRING" ~ "SILVER SPRING",
city == "BEHTESDA" ~ "BETHESDA",
city == "SILVERS SPRING" ~ "SILVER SPRING",
city == "GAIHTERSBURG" ~ "GAITHERSBUG",
city == "BETHEDA" ~ "BETHESDA",
city == "BARNSVILLE" ~ "BARNESVILLE",
city == "BEALSVILLE" ~ "BEALLSVILLE",
city == "CLAEKSBURG" ~ "CLARKSBURG",
city == "GAIHTERSBURG" ~ "GAITHERSBURG",
city == "GAITHERBURG" ~ "GAITHERSBURG",
city == "GAITHERSBUG" ~ "GAITHERSBURG",
city == "GAUTHERSBURG" ~ "GAITHERSBURG",
city == "GAITHERSBUG" ~ "GAITHERSBURG",
city == "GRMANTOWN" ~ "GERMANTOWN",
city == "KENSTINGTON" ~ "KENSINGTON",
city == "MT AIRY" ~ "MOUNT AIRY",
city == "TACOMA PARK" ~ "TAKOMA PARK",
city == "WEHATON" ~ "WHEATON",
TRUE ~ city
))
moco_2023 <- moco_data %>%
filter(year == "2023", crime_name == "Motor Vehicle Theft")
#exporting 2023
write_csv(moco_2023, "data/moco_2023.csv")
moco_car_thefts <- moco_data %>%
filter(crime_name == "Motor Vehicle Theft")
write_csv(moco_car_thefts, "data/moco_car_thefts.csv")
View(moco_car_thefts)
moco_yearly <- moco_car_thefts %>%
group_by(year) %>%
summarize(count = n()) %>%
mutate(perc = count/sum(count)*100)
ggplot() +
geom_bar(
data=moco_yearly,
aes(x=year, weight=`count`))+
labs(title = "Montgomery County car thefts",
caption =  "Source: MoCo Open Data | Graph by Dylan Manfre")
write_csv(moco_yearly, "data/moco_yearly.csv")
moco_theft_places <- moco_car_thefts %>%
group_by(place) %>%
summarize(count = n()) %>%
mutate(perc = count/sum(count)*100) %>%
arrange(desc(count))
moco_monthly <- moco_car_thefts %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month, label = TRUE)) %>%
pivot_wider(names_from = year, values_from = count, values_fill = 0)
View(pg_county_crime_old)
View(pg_county_crime_new)
View(pg_month_total)
View(total_pg_county_data)
library(tidyverse)
library(janitor)
library(lubridate)
#install.packages('tidygeocoder')
library(tidygeocoder)
#install.packages("curl")
library(curl)
library(ggplot2)
library(ggrepel)
pg_county_crime_old <-  read.csv("data/pg_county_crime.csv")
moco_data <- read_csv("data/test_data.csv")
pg_county_crime_new <-  read.csv("data/pg_county_crime_new.csv")
pg_county_crime_old <- pg_county_crime_old %>%
clean_names()
pg_county_crime_new <- pg_county_crime_new %>%
clean_names()
#extracting the year column and making the date the correct format
pg_county_crime_old <- pg_county_crime_old %>%
mutate(date = as.Date(date, "%m/%d/%Y"),
year = year(date),
month = month(date)) %>%
filter(date < "2023-07-01")
pg_county_crime_new <- pg_county_crime_new %>%
mutate(date = as.Date(date, "%m/%d/%Y"),
year = year(date),
month = month(date))
# Renaming the crime column to be easier to work with
pg_county_crime_old <-  pg_county_crime_old %>%
rename(crime_type = clearance_code_inc_type)
pg_county_crime_new <- pg_county_crime_new %>%
rename(crime_type = clearance_code_inc_type)
pg_county_crime_old %>%
distinct(crime_type)
pg_county_crime_new %>%
distinct(crime_type)
pg_county_crime_old <- pg_county_crime_old %>%
filter(year >= 2019)
#pg county_crime_new from July 5 - Oct. 10
#binding
total_pg_county_data <- bind_rows(pg_county_crime_old, pg_county_crime_new )
pg_stolen_auto <- total_pg_county_data %>%
filter(crime_type == "AUTO, STOLEN" | crime_type == "AUTO, STOLEN & RECOVERED" )
# yearly data
pg_yearly_data <- pg_stolen_auto %>%
group_by(year) %>%
summarize(count = n()) %>%
mutate(perc = (count / sum(count)) * 100)
ggplot() +
geom_bar(
data=pg_yearly_data,
aes(x=year, weight=`count`))+
labs(title = "Car thefts in PG county",
caption =  "Source: PG Open Data | Graph by Dylan Manfre")
# What I did here first was make individual month totals by year. I thought there was a condenced way to do this so I used Chat GPT to write this look to iterate over each year from 2017 to 2023.
# My next attempt was at making a loop before Derek suggested making a month/year column
pg_month_total <- pg_stolen_auto %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month, label = TRUE)) %>%
arrange(desc(count))
pg_stolen_recovered_only <- total_pg_county_data %>%
filter(crime_type == "AUTO, STOLEN & RECOVERED")
#What percentage were stolen
pg_perc_stolen <- pg_stolen_auto %>%
group_by(year, crime_type) %>%
summarize(count = n()) %>%
#mutate(perc = (count / sum(count)) * 100) %>%
pivot_wider(names_from = year, values_from = count)
pg_stolen_recovered_years <- pg_stolen_recovered_only %>%
group_by(year) %>%
summarize(count = n())
# cleaning
moco_data <- moco_data %>%
clean_names() %>%
separate(start_date_time, c('start_date', 'start_time'), sep=' ', extra='merge') %>%
mutate(start_date = as.Date(start_date, format = "%m/%d/%Y"),
year = year(start_date),
month = month(start_date)) %>%
filter(year >= 2019) %>%
filter(crime_name2 == "Motor Vehicle Theft") %>%
rename(crime_name = crime_name2)
moco_data %>%
group_by(city) %>%
summarize(count = n())
moco_data <- moco_data %>%
mutate(city = case_when(
city == "SILVE SPRING" ~ "SILVER SPRING",
city == "BEHTESDA" ~ "BETHESDA",
city == "SILVERS SPRING" ~ "SILVER SPRING",
city == "GAIHTERSBURG" ~ "GAITHERSBUG",
city == "BETHEDA" ~ "BETHESDA",
city == "BARNSVILLE" ~ "BARNESVILLE",
city == "BEALSVILLE" ~ "BEALLSVILLE",
city == "CLAEKSBURG" ~ "CLARKSBURG",
city == "GAIHTERSBURG" ~ "GAITHERSBURG",
city == "GAITHERBURG" ~ "GAITHERSBURG",
city == "GAITHERSBUG" ~ "GAITHERSBURG",
city == "GAUTHERSBURG" ~ "GAITHERSBURG",
city == "GAITHERSBUG" ~ "GAITHERSBURG",
city == "GRMANTOWN" ~ "GERMANTOWN",
city == "KENSTINGTON" ~ "KENSINGTON",
city == "MT AIRY" ~ "MOUNT AIRY",
city == "TACOMA PARK" ~ "TAKOMA PARK",
city == "WEHATON" ~ "WHEATON",
TRUE ~ city
))
moco_2023 <- moco_data %>%
filter(year == "2023", crime_name == "Motor Vehicle Theft")
#exporting 2023
write_csv(moco_2023, "data/moco_2023.csv")
moco_car_thefts <- moco_data %>%
filter(crime_name == "Motor Vehicle Theft")
write_csv(moco_car_thefts, "data/moco_car_thefts.csv")
View(moco_car_thefts)
moco_yearly <- moco_car_thefts %>%
group_by(year) %>%
summarize(count = n()) %>%
mutate(perc = count/sum(count)*100)
ggplot() +
geom_bar(
data=moco_yearly,
aes(x=year, weight=`count`))+
labs(title = "Montgomery County car thefts",
caption =  "Source: MoCo Open Data | Graph by Dylan Manfre")
write_csv(moco_yearly, "data/moco_yearly.csv")
moco_theft_places <- moco_car_thefts %>%
group_by(place) %>%
summarize(count = n()) %>%
mutate(perc = count/sum(count)*100) %>%
arrange(desc(count))
moco_monthly <- moco_car_thefts %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month, label = TRUE)) %>%
pivot_wider(names_from = year, values_from = count, values_fill = 0)
View(moco_theft_places)
View(moco_monthly)
View(moco_yearly)
View(pg_yearly_data)
View(pg_month_total)
View(pg_stolen_recovered_only)
View(pg_stolen_recovered_years)
View(pg_yearly_data)
View(pg_month_total)
View(pg_yearly_data)
View(moco_yearly)
View(moco_monthly)
View(moco_theft_places)
moco_car_thefts %>%
group_by(place) %>%
summarize(count = n()) %>%
mutate(perc = count/sum(count)*100) %>%
arrange(desc(count))
moco_car_thefts %>%
filter(year == 2023) %>%
group_by(place) %>%
summarize(count = n()) %>%
mutate(perc = count/sum(count)*100) %>%
arrange(desc(count))
moco_data %>%
group_by(city) %>%
summarize(count = n()) %>%
arrange(desc(couint))
moco_data %>%
group_by(city) %>%
summarize(count = n()) %>%
arrange(desc(count))
moco_data %>%
filter(year == 2023) %>%
group_by(city) %>%
summarize(count = n()) %>%
arrange(desc(count))
View(pg_stolen_recovered_years)
View(pg_perc_stolen)
pg_stolen_auto %>%
group_by(year, crime_type) %>%
summarize(count = n()) %>%
mutate(perc = (count / sum(count)) * 100) %>%
pivot_wider(names_from = year, values_from = count)
pg_stolen_auto %>%
group_by(year, crime_type) %>%
summarize(count = n()) %>%
mutate(perc = (count / sum(count)) * 100)
pg_stolen_auto %>%
group_by(year, crime_type) %>%
summarize(count = n()) %>%
#mutate(perc = (count / sum(count)) * 100) %>%
pivot_wider(names_from = year, values_from = count)
pg_stolen_auto %>%
group_by(year, crime_type) %>%
summarize(count = n()) %>%
mutate(perc = (count / sum(count)) * 100) %>%
pivot_wider(names_from = year, values_from = count)
pg_stolen_auto %>%
group_by(year, crime_type) %>%
summarize(count = n()) %>%
mutate(perc = (count / sum(count)) * 100)
pg_stolen_auto %>%
group_by(year, crime_type) %>%
summarize(count = n()) %>%
mutate(perc = (count / sum(count)) * 100) %>%
pivot_wider(names_from = year, values_from = count)
pg_perc_stolen %>%
summarize(total = sum(2019 + 2020 + 2021 + 2022 +2023 ))
pg_stolen_auto %>%
group_by(year, crime_type) %>%
summarize(count = n()) %>%
mutate(perc = (count / sum(count)) * 100)%>%
pivot_wider(names_from = year, values_from = count)
pg_stolen_auto %>%
group_by(year, crime_type) %>%
summarize(count = n()) %>%
mutate(perc = (count / sum(count)) * 100) %>%
pivot_wider(names_from = year, values_from = count)
pg_perc_stolen %>%
summarize(grand total = sum(AUTO, STOLEN))
pg_perc_stolen %>%
summarize(grand_total = sum(AUTO, STOLEN))
pg_perc_stolen %>%
summarize(grand_total = sum("AUTO, STOLEN"))
pg_perc_stolen %>%
mutate(grand_total = sum("AUTO, STOLEN"))
View(pg_yearly_data)
View(pg_month_total)
pg_stolen_auto %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month, label = TRUE)) %>%
arrange(desc(count)) %>%
pivot_wider(names_from = year, values_from = count)
pg_stolen_auto %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month, label = TRUE)) %>%
pivot_wider(names_from = year, values_from = count)
pg_month_total <- pg_stolen_auto %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month, label = TRUE)) %>%
pivot_wider(names_from = year, values_from = count)
pg_stolen_auto %>%
group_by(year, crime_type) %>%
summarize(count = n()) %>%
mutate(perc = (count / sum(count)) * 100) %>%
pivot_wider(names_from = year, values_from = count)
library(tidyverse)
library(janitor)
library(lubridate)
#install.packages('tidygeocoder')
library(tidygeocoder)
#install.packages("curl")
library(curl)
library(ggplot2)
library(ggrepel)
pg_county_crime_old <-  read.csv("data/pg_county_crime.csv")
moco_data <- read_csv("data/test_data.csv")
pg_county_crime_new <-  read.csv("data/pg_county_crime_new.csv")
pg_county_crime_old <- pg_county_crime_old %>%
clean_names()
pg_county_crime_new <- pg_county_crime_new %>%
clean_names()
#extracting the year column and making the date the correct format
pg_county_crime_old <- pg_county_crime_old %>%
mutate(date = as.Date(date, "%m/%d/%Y"),
year = year(date),
month = month(date)) %>%
filter(date <= "2023-07-01")
pg_county_crime_new <- pg_county_crime_new %>%
mutate(date = as.Date(date, "%m/%d/%Y"),
year = year(date),
month = month(date))
# Renaming the crime column to be easier to work with
pg_county_crime_old <-  pg_county_crime_old %>%
rename(crime_type = clearance_code_inc_type)
pg_county_crime_new <- pg_county_crime_new %>%
rename(crime_type = clearance_code_inc_type)
pg_county_crime_old %>%
distinct(crime_type)
pg_county_crime_new %>%
distinct(crime_type)
pg_county_crime_old <- pg_county_crime_old %>%
filter(year >= 2019)
#pg county_crime_new from July 5 - Oct. 10
#binding
total_pg_county_data <- bind_rows(pg_county_crime_old, pg_county_crime_new )
pg_stolen_auto <- total_pg_county_data %>%
filter(crime_type == "AUTO, STOLEN" | crime_type == "AUTO, STOLEN & RECOVERED" )
# yearly data
pg_yearly_data <- pg_stolen_auto %>%
group_by(year) %>%
summarize(count = n()) %>%
mutate(perc = (count / sum(count)) * 100)
ggplot() +
geom_bar(
data=pg_yearly_data,
aes(x=year, weight=`count`))+
labs(title = "Car thefts in PG county",
caption =  "Source: PG Open Data | Graph by Dylan Manfre")
# What I did here first was make individual month totals by year. I thought there was a condenced way to do this so I used Chat GPT to write this look to iterate over each year from 2017 to 2023.
# My next attempt was at making a loop before Derek suggested making a month/year column
pg_month_total <- pg_stolen_auto %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month, label = TRUE)) %>%
pivot_wider(names_from = year, values_from = count)
pg_stolen_recovered_only <- total_pg_county_data %>%
filter(crime_type == "AUTO, STOLEN & RECOVERED")
#What percentage were stolen
pg_perc_stolen <- pg_stolen_auto %>%
group_by(year, crime_type) %>%
summarize(count = n()) %>%
mutate(perc = (count / sum(count)) * 100) %>%
pivot_wider(names_from = year, values_from = count)
pg_stolen_recovered_years <- pg_stolen_recovered_only %>%
group_by(year) %>%
summarize(count = n())
# cleaning
moco_data <- moco_data %>%
clean_names() %>%
separate(start_date_time, c('start_date', 'start_time'), sep=' ', extra='merge') %>%
mutate(start_date = as.Date(start_date, format = "%m/%d/%Y"),
year = year(start_date),
month = month(start_date)) %>%
filter(year >= 2019) %>%
filter(crime_name2 == "Motor Vehicle Theft") %>%
rename(crime_name = crime_name2)
moco_data %>%
filter(year == 2023) %>%
group_by(city) %>%
summarize(count = n()) %>%
arrange(desc(count))
moco_data <- moco_data %>%
mutate(city = case_when(
city == "SILVE SPRING" ~ "SILVER SPRING",
city == "BEHTESDA" ~ "BETHESDA",
city == "SILVERS SPRING" ~ "SILVER SPRING",
city == "GAIHTERSBURG" ~ "GAITHERSBUG",
city == "BETHEDA" ~ "BETHESDA",
city == "BARNSVILLE" ~ "BARNESVILLE",
city == "BEALSVILLE" ~ "BEALLSVILLE",
city == "CLAEKSBURG" ~ "CLARKSBURG",
city == "GAIHTERSBURG" ~ "GAITHERSBURG",
city == "GAITHERBURG" ~ "GAITHERSBURG",
city == "GAITHERSBUG" ~ "GAITHERSBURG",
city == "GAUTHERSBURG" ~ "GAITHERSBURG",
city == "GAITHERSBUG" ~ "GAITHERSBURG",
city == "GRMANTOWN" ~ "GERMANTOWN",
city == "KENSTINGTON" ~ "KENSINGTON",
city == "MT AIRY" ~ "MOUNT AIRY",
city == "TACOMA PARK" ~ "TAKOMA PARK",
city == "WEHATON" ~ "WHEATON",
TRUE ~ city
))
moco_2023 <- moco_data %>%
filter(year == "2023", crime_name == "Motor Vehicle Theft")
#exporting 2023
write_csv(moco_2023, "data/moco_2023.csv")
moco_car_thefts <- moco_data %>%
filter(crime_name == "Motor Vehicle Theft")
write_csv(moco_car_thefts, "data/moco_car_thefts.csv")
View(moco_car_thefts)
moco_yearly <- moco_car_thefts %>%
group_by(year) %>%
summarize(count = n()) %>%
mutate(perc = count/sum(count)*100)
ggplot() +
geom_bar(
data=moco_yearly,
aes(x=year, weight=`count`))+
labs(title = "Montgomery County car thefts",
caption =  "Source: MoCo Open Data | Graph by Dylan Manfre")
write_csv(moco_yearly, "data/moco_yearly.csv")
moco_theft_places <- moco_car_thefts %>%
group_by(place) %>%
summarize(count = n()) %>%
mutate(perc = count/sum(count)*100) %>%
arrange(desc(count))
#2023 only
moco_car_thefts %>%
filter(year == 2023) %>%
group_by(place) %>%
summarize(count = n()) %>%
mutate(perc = count/sum(count)*100) %>%
arrange(desc(count))
moco_monthly <- moco_car_thefts %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month, label = TRUE)) %>%
pivot_wider(names_from = year, values_from = count, values_fill = 0)
View(pg_stolen_recovered_only)
View(pg_stolen_recovered_years)
View(moco_yearly)
View(pg_month_total)
View(pg_perc_stolen)
View(pg_yearly_data)
View(pg_month_total)
View(moco_data)
View(moco_monthly)
View(moco_yearly)
View(moco_data)

#extracting the year column and making the date the correct format
pg_county_crime <- pg_county_crime %>%
mutate(date = as.Date(date, format = "%m/%d/%Y"),
year = year(date))
# Renaming the crime column to be easier to work with
pg_county_crime <-  pg_county_crime %>%
rename(crime_type = clearance_code_inc_type)
pg_county_crime %>%
distinct(crime_type)
stolen_auto <- pg_county_crime %>%
filter(crime_type == "AUTO, STOLEN")
# yearly data
yearly_data <- stolen_auto %>%
group_by(year) %>%
summarize(count = n())
# showing a % growth
(3338 - 2331)/(2331)*100
ggplot() +
geom_bar(
data=yearly_data,
aes(x=year, weight=`count`))
month_total_2023 <- stolen_auto %>%
filter(year == "2023") %>%
mutate(month = month(date)) %>%
group_by(month, year) %>%
summarize(count = n())
#Data only goes to July 5 which is why July is so low.
year_start <- 2017
year_end <- 2022
result_list <- list()
for (year in year_start:year_end) {
month_total <- stolen_auto %>%
filter(year == as.character(year)) %>%
mutate(month = month(date)) %>%
group_by(month, year) %>%
summarize(count = n())
result_list[[as.character(year)]] <- month_total
}
month_totals %>%
arrange(desc(count))
View(month_total)
View(result_list)
year_start <- 2017
year_end <- 2022
result_list <- list()
for (year in year_start:year_end) {
month_total <- stolen_auto %>%
filter(year == as.character(year)) %>%
mutate(month = month(date)) %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month, label = TRUE))
result_list[[as.character(year)]] <- month_total
}
month_total_2022 <- stolen_auto %>%
filter(year == "2022") %>%
mutate(month = month(date)) %>%
group_by(month, year) %>%
summarize(count = n())
View(month_total_2022)
month_total %>%
filter(year == "2022")
rm(list = "month_total_2022")
View(month_total)
# What I did here first was make individual monbth totals by year. I thought there was a condenced way to do this so I used Chat GPT to write this look to iterate over each year from 2017 to 2023.
year_start <- 2017
year_end <- 2022
result_list <- list()
for (year in year_start:year_end) {
month_total <- stolen_auto %>%
filter(year == as.character(year)) %>%
mutate(month = month(date)) %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month, label = TRUE))
result_list[[as.character(year)]] <- month_total
}
stolen_auto <- pg_county_crime %>%
filter(crime_type == "AUTO, STOLEN")
library(tidyverse)
library(janitor)
library(lubridate)
pg_county_crime <-  read.csv("data/pg_county_crime.csv")
pg_county_crime <- pg_county_crime %>%
clean_names()
#extracting the year column and making the date the correct format
pg_county_crime <- pg_county_crime %>%
mutate(date = as.Date(date, format = "%m/%d/%Y"),
year = year(date))
# Renaming the crime column to be easier to work with
pg_county_crime <-  pg_county_crime %>%
rename(crime_type = clearance_code_inc_type)
pg_county_crime %>%
distinct(crime_type)
stolen_auto <- pg_county_crime %>%
filter(crime_type == "AUTO, STOLEN")
# yearly data
yearly_data <- stolen_auto %>%
group_by(year) %>%
summarize(count = n())
# showing a % growth
(3338 - 2331)/(2331)*100
ggplot() +
geom_bar(
data=yearly_data,
aes(x=year, weight=`count`))
month_total_2023 <- stolen_auto %>%
filter(year == "2023") %>%
mutate(month = month(date)) %>%
group_by(month, year) %>%
summarize(count = n())
#Data only goes to July 5 which is why July is so low.
# What I did here first was make individual monbth totals by year. I thought there was a condenced way to do this so I used Chat GPT to write this look to iterate over each year from 2017 to 2023.
year_start <- 2017
year_end <- 2022
result_list <- list()
for (year in year_start:year_end) {
month_total <- stolen_auto %>%
filter(year == as.character(year)) %>%
mutate(month = month(date)) %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month, label = TRUE))
result_list[[as.character(year)]] <- month_total
}
month_totals %>%
arrange(desc(count))
month_total %>%
arrange(desc(count))
year_start <- 2017
year_end <- 2023
result_list <- list()
for (year in year_start:year_end) {
month_total <- stolen_auto %>%
filter(year == as.character(year)) %>%
mutate(month = month(date)) %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month, label = TRUE))
result_list[[as.character(year)]] <- month_total
}
View(month_total)
month_total %>%
arrange(desc(count))
View(stolen_auto)
View(pg_county_crime)
pg_county_crime <- pg_county_crime %>%
mutate(date = as.Date(date, format = "%m/%d/%Y"),
year = year(date),
month = month(date))
stolen_auto %>%
group_by(month, year) %>%
summarize(count = n())
stolen_auto <- pg_county_crime %>%
filter(crime_type == "AUTO, STOLEN")
stolen_auto %>%
group_by(month, year) %>%
summarize(count = n())
stolen_auto %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(date))
stolen_auto %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month))
stolen_auto %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month, label = TRUE))
month_total <- stolen_auto %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month, label = TRUE))
month_total <- stolen_auto %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month, label = TRUE))
View(month_total)
month_total %>%
arrange(desc(count))
rm(list = "month_total_2023")
library(tidyverse)
library(janitor)
library(lubridate)
pg_county_crime <-  read.csv("data/pg_county_crime.csv")
pg_county_crime <- pg_county_crime %>%
clean_names()
#extracting the year column and making the date the correct format
pg_county_crime <- pg_county_crime %>%
mutate(date = as.Date(date, format = "%m/%d/%Y"),
year = year(date),
month = month(date))
# Renaming the crime column to be easier to work with
pg_county_crime <-  pg_county_crime %>%
rename(crime_type = clearance_code_inc_type)
pg_county_crime %>%
distinct(crime_type)
stolen_auto <- pg_county_crime %>%
filter(crime_type == "AUTO, STOLEN")
# yearly data
yearly_data <- stolen_auto %>%
group_by(year) %>%
summarize(count = n())
# showing a % growth
(3338 - 2331)/(2331)*100
ggplot() +
geom_bar(
data=yearly_data,
aes(x=year, weight=`count`))
# What I did here first was make individual month totals by year. I thought there was a condenced way to do this so I used Chat GPT to write this look to iterate over each year from 2017 to 2023.
# My next attempt was at making a loop before Derek suggested making a month/year column
month_total <- stolen_auto %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month, label = TRUE))
month_total %>%
arrange(desc(count))
View(stolen_auto)
View(yearly_data)
View(month_total)
pg_county_crime %>%
group_by(month, crime_type) %>%
summarize(count = n())
pg_county_crime %>%
group_by(month, crime_type) %>%
summarize(count = n()) %>%
slict(1)
pg_county_crime %>%
group_by(month, crime_type) %>%
summarize(count = n()) %>%
arrange(desc(count))
pg_county_crime %>%
group_by(month, crime_type) %>%
summarize(count = n())
pg_county_crime %>%
group_by(month, crime_type) %>%
summarize(count = n()) %>%
arrange(month, desc(count))
pg_county_crime %>%
group_by(month, crime_type) %>%
summarize(count = n()) %>%
arrange(month, desc(count))
pg_county_crime %>%
group_by(month, crime_type) %>%
summarize(count = n())
pg_county_crime %>%
group_by(month) %>%
summarize(count = n()) %>%
```
pg_county_crime %>%
group_by(month) %>%
summarize(count = n())
pg_county_crime %>%
group_by(month = format(date, "%Y-%m"), crime_type) %>%
summarize(count = n()) %>%
arrange(month, desc(count)) %>%
group_by(month) %>%
slice(1)
pg_county_crime %>%
group_by(month = format(date, "%Y-%m"), crime_type) %>%
summarize(count = n()) %>%
arrange(month, desc(count)) %>%
slice(1)
pg_county_crime %>%
group_by(month, crime_type) %>%
summarize(count = n()) %>%
arrange(month, desc(count)) %>%
slice(1)
pg_county_crime %>%
group_by(month, crime_type) %>%
summarize(count = n()) %>%
arrange(desc(count)) %>%
slice(1)
pg_county_crime %>%
group_by(month) %>%
summarize(count = n()) %>%
arrange(desc(count)) %>%
slice(1)
pg_county_crime %>%
group_by(month) %>%
summarize(count = n()) %>%
arrange(desc(count))
pg_county_crime %>%
group_by(month, crime_type) %>%
summarize(count = n()) %>%
arrange(desc(count))
pg_county_crime %>% %>%
pg_county_crime%>%
filter(crime_type == "STOLEN, AUTO")
pg_county_crime %>%
filter(crime_type == "STOLEN, AUTO")
pg_county_crime %>%
filter(crime_type == "STOLEN, AUTO") %>%
group_by(month, crime_type) %>%
summarize(count = n()) %>%
arrange(desc(count))
pg_county_crime %>%
filter(crime_type == "STOLEN, AUTO") %>%
group_by(month, crime_type) %>%
summarize(count = n()) %>%
arrange(desc(count))
pg_county_crime %>%
filter(crime_type == "AUTO, STOLEN") %>%
group_by(month, crime_type) %>%
summarize(count = n()) %>%
arrange(desc(count))
pg_county_crime %>%
filter(crime_type == "AUTO, STOLEN") %>%
group_by(year, month, crime_type) %>%
summarize(count = n()) %>%
arrange(desc(count))
pg_county_crime %>%
group_by(year, month, crime_type) %>%
summarize(count = n()) %>%
arrange(desc(count))
View(pg_county_crime)
stolen_recovered <- pg_county_crime %>%
filter(crime_type == "AUTO, STOLEN & RECOVERED")
View(stolen_recovered)
stolen_recovered %>%
group_by(year) %>%
summarize(count = n())
SandR_yearly <- stolen_recovered %>%
group_by(year) %>%
summarize(count = n())
View(month_total)
View(month_total)
pg_county_crime %>%
filter(date > 2020)
pg_county_crime %>%
filter(date >= 2020)
pg_county_crime <- pg_county_crime %>%
filter(date >= 2020)
pg_county_crime <-  read.csv("data/pg_county_crime.csv")
pg_county_crime <- pg_county_crime %>%
clean_names()
#extracting the year column and making the date the correct format
pg_county_crime <- pg_county_crime %>%
mutate(date = as.Date(date, format = "%m/%d/%Y"),
year = year(date),
month = month(date))
# Renaming the crime column to be easier to work with
pg_county_crime <-  pg_county_crime %>%
rename(crime_type = clearance_code_inc_type)
pg_county_crime %>%
distinct(crime_type)
pg_county_crime <- pg_county_crime %>%
filter(date >= 2020)
pg_county_crime <- pg_county_crime %>%
filter(date >= 2020)
pg_county_crime <- pg_county_crime %>%
filter(date >= 2020)
pg_county_crime <- pg_county_crime %>%
filter(date >= 2020)
View(pg_county_crime)
pg_county_crime <- pg_county_crime %>%
filter(date >= 2020)
View(pg_county_crime)
pg_county_crime <- pg_county_crime %>%
filter(date >= 2020)
pg_county_crime <- pg_county_crime %>%
filter(date >= 2020)
pg_county_crime %>%
filter(year >= 2020)
pg_county_crime <- pg_county_crime %>%
filter(year >= 2020)
pg_county_crime %>%
filter(crime_type == "AUTO, STOLEN", crime_type == "AUTO, STOLEN & RECOVERED" )
pg_county_crime %>%
filter(crime_type == "AUTO, STOLEN" | crime_type == "AUTO, STOLEN & RECOVERED" )
pg_county_crime %>%
filter(crime_type == "AUTO, STOLEN" | crime_type == "AUTO, STOLEN & RECOVERED" )
stolen_auto <- pg_county_crime %>%
filter(crime_type == "AUTO, STOLEN" | crime_type == "AUTO, STOLEN & RECOVERED" )
# yearly data
yearly_data <- stolen_auto %>%
group_by(year) %>%
summarize(count = n())
# showing a % growth
(3338 - 2331)/(2331)*100
View(yearly_data)
ggplot() +
geom_bar(
data=yearly_data,
aes(x=year, weight=`count`))
stolen_auto %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month, label = TRUE))
stolen_auto %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month, label = TRUE)) %>%
arrange(desc(count))
month_total <- stolen_auto %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month, label = TRUE)) %>%
arrange(desc(count))
pg_county_crime %>%
filter(crime_type == "AUTO, STOLEN & RECOVERED")
stolen_recovered_only %>%
group_by(year) %>%
summarize(count = n())
stolen_recovered_only <- pg_county_crime %>%
filter(crime_type == "AUTO, STOLEN & RECOVERED")
stolen_recovered_only %>%
group_by(year) %>%
summarize(count = n())
stolen_recovered_years <- stolen_recovered_only %>%
group_by(year) %>%
summarize(count = n())
stolen_auto %>%
group_by(crime_type) %>%
summarize(count = n())
stolen_auto %>%
group_by(crime_type) %>%
summarize(count = n())
mutate(perc = (AUTO, STOLEN & RECOVERED	/ AUTO, STOLEN)*100))
stolen_auto %>%
group_by(crime_type) %>%
summarize(count = n()) %>%
mutate(perc = (AUTO, STOLEN & RECOVERED	/ AUTO, STOLEN)*100))
stolen_auto %>%
group_by(crime_type) %>%
summarize(count = n()) %>%
perc = (AUTO, STOLEN & RECOVERED	/ AUTO, STOLEN)*100)))
stolen_auto %>%
group_by(crime_type) %>%
summarize(count = n())
mutate(perc = (AUTO, STOLEN & RECOVERED	/ AUTO, STOLEN)*100))
stolen_auto %>%
group_by(crime_type) %>%
summarize(count = n()) %>%
mutate(perc = (AUTO, STOLEN & RECOVERED	/ AUTO, STOLEN)*100))
stolen_auto %>%
group_by(crime_type) %>%
summarize(count = n())
stolen_auto %>%
group_by(crime_type) %>%
summarize(count = n()) %>%
mutate(perc = (count / sum(count)) * 100)
#What percentage were stolen
perc_stolen <- stolen_auto %>%
group_by(crime_type) %>%
summarize(count = n()) %>%
mutate(perc = (count / sum(count)) * 100)
stolen_auto %>%
group_by(crime_type) %>%
summarize(count = n()) %>%
mutate(perc = (count / sum(count)) * 100)
stolen_auto %>%
group_by(year) %>%
summarize(count = n()) %>%
mutate(perc = (count / sum(count)) * 100)
# yearly data
yearly_data <- stolen_auto %>%
group_by(year) %>%
summarize(count = n()) %>%
mutate(perc = (count / sum(count)) * 100)
stolen_auto %>%
group_by(month, year) %>%
summarize(count = n()) %>%
mutate(month = month(month, label = TRUE)) %>%
arrange(desc(count)) %>%
mutate(perc = (count / sum(count)) * 100)
stolen_recovered_only %>%
group_by(year) %>%
summarize(count = n())
install.packages('tidygeocoder')
library(tidygeocoder)
library(tidygeocoder)
View(stolen_auto)
stolen_auto %>%
reverse_geocode(lat = latitude, long = longitude, method = 'osm',
address = street_address, full_results = TRUE)
test <-  stolen_auto %>%
filter(incident_case_id == "PP21062600000290")
test %>%
reverse_geocode(lat = latitude, long = longitude, method = 'osm',
address = street_address, full_results = TRUE)
View(test)
reverse <- test %>%
reverse_geocode(lat = latitude, long = longitude, method = 'osm',
address = street_address, full_results = TRUE)
View(reverse)
View(reverse)
View(reverse)
reverse_geocoding <- stolen_auto %>%
reverse_geocode(lat = latitude, long = longitude, method = 'osm',
address = street_address, full_results = TRUE)
View(reverse)
stolen_recovered_only %>%
reverse_geocode(lat = latitude, long = longitude, method = 'osm',
address = street_address, full_results = TRUE)
reverse_geocoding_test <- stolen_recovered_only %>%
reverse_geocode(lat = latitude, long = longitude, method = 'osm',
address = street_address, full_results = TRUE)
reverse_geocoding_test <- stolen_recovered_only %>%
reverse_geocode(lat = latitude, long = longitude, method = 'osm',
address = street_address, full_results = TRUE)
View(reverse_geocoding_test)
reverse_geocoding_test %>%
select(-osm_id, -place_rank, -importance, -county, )
reverse_geocoding_test %>%
distinct(city)
reverse_geocoding_test %>%
distinct(type)
reverse_geocoding_stolen_auto <- stolen_auto %>%
reverse_geocode(lat = latitude, long = longitude, method = 'osm',
address = street_address, full_results = TRUE)
